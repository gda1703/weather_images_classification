# -*- coding: utf-8 -*-


import base64
import math
import numpy as np
import pandas as pd
import pickle
import plotly.express as px
import plotly.graph_objs as go
import random
import seaborn as sns
import sys
import base64
import datetime
import io
from dash import dcc, html, dash_table
from base64 import b64encode
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
from PIL import Image


from tensorflow.keras.applications.inception_v3 import InceptionV3


# Charger le mod√®le 
with open(r'../src/packages/inceptionV3_model.pkl', 'rb') as file:
    incv3 = pickle.load(file)

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']


# Creation de l'object qui permet de contenir l'application dash 
app = Dash(__name__, suppress_callback_exceptions=True, external_stylesheets=external_stylesheets)

# Configuration du nom de l'application
app.title = 'Meteo_app'

# Codage et encodage de l'image
def b64_image(image_filename):
    with open(image_filename, 'rb') as f:
        image = f.read()
    return 'data:image/png;base64,' + base64.b64encode(image).decode('utf-8')

## Lecture de l'image qu'on va utiliser comme logo 
path_perf_lanet = 'lanet_perf.png'
pil_img = Image.open(path_perf_lanet)

path_perf_incp = 'inceptionV3_perf.png'
pil_img = Image.open(path_perf_incp)

path_perf_efn = 'efc_perf.png'
pil_img = Image.open(path_perf_efn)


external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']


# Creation de l'object qui permet de contenir l'application dash 
app = Dash(__name__, suppress_callback_exceptions=True, external_stylesheets=external_stylesheets)


# Configuration du style des tabs personnalise
tabs_styles = {
    'height': '44px'}

tab_style = {
    'borderBottom': '2px solid black',
    'padding': '6px',
    'fontWeight': 'bold',
    'color': 'black'}

tab_selected_style = {
    'borderTop': '2px solid black',
    'borderBottom': '2px solid black',
    'backgroundColor': '#CECCD0',
    'color': 'black',
    'padding': '6px'}

                    
# Configuration du layout de l'application                                          
app.layout = html.Div(style={'fontFamily': 'Arial'},
    children=[
        html.Div(
            html.H1('Pr√©diction d‚Äôimages m√©t√©orologiques', style={'text-align': 'center', 'color':'black', 'margin-bottom': '20px'})
        ),
        dcc.Tabs(id="tabs-styled-with-inline",  value='tab-1', children=[
            dcc.Tab(label='Home page', value='tab-1', style=tab_style, selected_style=tab_selected_style),
            dcc.Tab(label='Mod√®les et performances', value='tab-2', style=tab_style, selected_style=tab_selected_style), 
            dcc.Tab(label='Pr√©diction en temps r√©el', value='tab-3', style=tab_style, selected_style=tab_selected_style)
        ], style={'backgroundColor': 'lightgrey'}),
        html.Div(id='tabs-content-inline')
    ]
)

# Configuration des tabs
@app.callback(Output('tabs-content-inline', 'children'),
              Input('tabs-styled-with-inline', 'value'))

def render_content(tab):    
    if tab == 'tab-1':
       return html.Div([
           html.H4("Cadre du projet", style={'text-align': 'center', 'margin-top':'30px'}),
    html.Div([ 
    html.P([
    "Dans le cadre du projet de ma mati√®re Deep Learning enseign√© par Monsieur R.Yurchak, nous avons r√©alis√© un mod√®le de classification  d'images m√©t√©orologiques. En effet, sur la base de donn√©es trouv√©es sur le site ", 
    html.A("https://www.kaggle.com/datasets/pratik2901/multiclass-weather-dataset", href="https://www.kaggle.com/datasets/pratik2901/multiclass-weather-dataset"), 
    ", le probl√®me qui nous a √©t√© soumis √©tait de trouver le climat pr√©sent sur une image donn√©e. ", 
    html.Br(),
    html.Br(),
    "La base de donn√©es contenait des labels associ√©es √† 4 climats, respectivement: ",
html.Ul([
        html.Li(" ‚òÅÔ∏è nuageux"),
        html.Li(" üåßÔ∏è pluvieux"),
        html.Li(" ‚òÄÔ∏è ensoleill√©"),
        html.Li(" üåÖ lev√©e du soleil"),]),
    html.Br(),
    "Ainsi, nous avons impl√©ment√© diff√©rents mod√®les de classification d'images que vous pourrez trouver dans les sections suivantes de notre interface web  apr√®s avoir effectuer un preprocessing propres aux donn√©es d'images.",
])
        ], style={'padding': '20px', 'justifyContent': 'space-between', 'border': '3px solid #CECCD0', 'margin-bottom':'150px', 'margin-top':'50px'}), 
    
    html.Div([
        html.H4("CONTACTS üë®‚Äçüíª", style={'text-align': 'center', 'margin-bottom': '20px', 'color': 'black'})
    ], style={'margin': 'auto', 'background-color': '#CECCD0',  'width': '100%', 'height': '40px', 'display': 'flex', 'justify-content': 'center', 'align-items': 'center', 'margin-top':'100px'}),
    html.Div([                    
        html.Div([
            html.P(html.Strong("Giulia Dall'Omo"), style={'text-align': 'center', 'color': 'black'}),
            html.P("MoSEF - Stellantis"),
            html.P([html.Span("Git: "), html.A("Click here", href="https://github.com/gda1703/", target="_blank")]),
            html.P([html.Span("Linkedin: "), html.A("Click here", href="https://www.linkedin.com/in/giulia-dallomo/", target="_blank")])
        ], style={'border-right': '2px solid black', 'padding-right': '50px', 'margin-right': '30px', 'margin-left': '20px'}),
        html.Div([
            html.P(html.Strong("Amande Edo"), style={'text-align': 'center', 'color': 'black'}),
            html.P("MoSEF - BRED"),
            html.P([html.Span("Git: "), html.A("Click here", href="https://github.com/amandeedo/", target="_blank")]),
            html.P([html.Span("Linkedin: "), html.A("Click here", href="https://www.linkedin.com/in/amande-edo-2b51051b3/", target="_blank")])
        ], style={'padding-left': '20px', 'margin-left': '20px'}),
    ], style={'margin': 'auto', 'background-color': '#CECCD0', 'width': '100%', 'height': '150px', 'display': 'flex', 'justify-content': 'center', 'text-align': 'center', 'align-items': 'center'})
])

        
    # Creation de la page qui contient les mod√®les
    elif tab == 'tab-2':
        return html.Div([
            html.H3('Mod√®les et performances', style={'text-align': 'center'}),
            html.Label('S√©lectionner un mod√®le'),
            dcc.Dropdown(
                id='model-dropdown',
                options=[
                    {'label': 'LeNet', 'value': 'model1'},
                    {'label': 'InceptionV3', 'value': 'model2'}, 
                    {'label': 'EfficientNet', 'value': 'model3'}
                ],
                value='model1'
            ), 
            
            html.Div(id='model-metrics')
        ])
    
    # Creation de la page pr√©diction en temps r√©el
    elif tab == 'tab-3':
        return html.Div([
            html.H4("Pr√©dictions en temps r√©el", style={'text-align': 'center'}), 
        html.Div([
    html.P([
    "Notre application Web comprend une fonctionnalit√© puissante qui permet aux utilisateurs de glisser-d√©poser une image sur l'interface, qui est ensuite automatiquement trait√©e par notre mod√®le d'apprentissage en profondeur. Ce mod√®le est bas√© sur l'architecture InceptionV3, qui est largement consid√©r√©e comme l'un des mod√®les de reconnaissance d'images les plus puissants disponibles aujourd'hui.",
    html.Br(),
    html.Br(),
    "En utilisant cette fonctionnalit√© de glisser-d√©poser, les utilisateurs peuvent rapidement et facilement t√©l√©charger des images et obtenir des pr√©dictions √† partir de notre mod√®le. Il s'agit d'un outil extr√™mement pr√©cieux pour quiconque a besoin de classer ou d'identifier des images de mani√®re rapide et efficace. Que vous soyez un m√©t√©orologue cherchant √† identifier diff√©rents types de mod√®les m√©t√©orologiques ou un chercheur qui doit analyser de grandes quantit√©s de donn√©es, cette fonctionnalit√© peut vous aider √† obtenir les r√©sultats dont vous avez besoin rapidement et facilement.",
])
    
        ], style={'padding': '20px', 'justifyContent': 'space-between', 'border': '3px solid #CECCD0', 'margin-top':'50px'}), 
        
        html.Div([
     
            dcc.Upload(
                id='upload-image',
                children=html.Div([
                    'Drag and Drop ou ',
                    html.A('Selectionner une image')
                ]),
                style={
                    'height': '60px',
                    'lineHeight': '60px',
                    'borderWidth': '1px',
                    'borderStyle': 'dashed',
                    'borderRadius': '5px',
                    'textAlign': 'center',
                    'margin': '10px'
                },
                # Allow multiple files to be uploaded
                multiple=True
            ),
        ]),
        html.Div(id='output-image-upload'),
        html.Div(id='output-prediction'), 
    ])




# Configuration de la page des modeles 
@app.callback(
    Output('model-metrics', 'children'),
    Input('model-dropdown', 'value'))
    
def update_model_metrics(model):
    if model == 'model1':
        # Metriques du modele 
        return html.Div([
    html.H3("LaNet", style={'color': 'black', 'text-align': 'center'}),
    
    
    html.Div([
    html.P([
    "L‚Äôarchitecture ",
    html.Strong("LeNet"),
    " a √©t√© introduite par Yann LeCun en Novembre 1998 dans le journal Proceedings of the IEEE. C'est l'une des premi√®res et plus simples architectures de r√©seau de neurones convolutifs (CNN). Au d√©part, elle a √©t√© construite pour la reconnaissance de carat√®res manuscrits et a ouvert la voie √† des nombreuses autres architectures de CNN plus complexes. Elle est donc devenue le point de d√©part pour la classification d'images. ",
    html.Br(),
    html.Br(),
    "L'architecture du LeNet est constitu√©e des couches suivantes:",
    html.Ul([
        html.Li("Convolution 1 : 30 filtres, dimension d'entr√©e (28, 28, 1), dimension du noyau (5, 5), fonction d'activation ReLU, pas de d√©passement du noyau. Dans notre cas, les images sont de la taille 224x224 donc nous avons chang√© la dimension d'entr√©e pour notre probl√®me."),
        html.Li("Max-Pooling 1 : dimension du pooling (2, 2)."),
        html.Li("Convolution 2 : 16 filtres, dimension du noyau (3, 3), fonction d'activation ReLU, Pas de d√©passement du noyau."),
        html.Li("Max-Pooling 2 : dimension du pooling (2, 2)."),
        html.Li("Dropout : Connexions coup√©es: 20%. (que nous avons mis √† 40%)"),
        html.Li("Aplatissement"),
        html.Li("Dense 1 : 128 neurones, fonction d'activation ReLU."),
        html.Li("Dense 2 : 10 neurones, fonction d'activation softmax (que nous avons mis √† 4 puisque nous avons 4 labels)"),
    ]),
    html.Br(),
    "L'architecture ",
    html.Strong("LeNet est une des plus simples"),
    " √† impl√©menter et une des plus importantes en Deep Learning car elle est le pilier de nombreux mod√®les plus complexe."
])

    
        ], style={'padding': '20px', 'justifyContent': 'space-between', 'border': '3px solid #CECCD0'}), 

    
    html.H4('M√©triques', style={'color': 'black', 'text-align': 'center'}),
    html.Div([
        html.Div([
            html.H5("Train Loss", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.3874')
        ], style={'padding': '30px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}),
        html.Div([
            html.H5("Train Accuracy", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.8633')
        ], style={'padding': '30px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}),
        html.Div([
            html.H5("Validation Loss", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.2990')
        ], style={'padding': '30px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}), 
        html.Div([
            html.H5("Validation Accuracy", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.9107')
        ], style={'padding': '30px', 'text-align': 'center', 'border': '3px solid #CECCD0'}), 
    ], style={'display': 'flex', 'justify-content': 'center', 'align-items': 'center', 'margin-top': '20px', 'padding-top': '20px', 'margin-bottom': '50px'}),
    
    # Graphiques cote √† cote
    html.H4('Evolution de la performance du mod√®le', style={'color': 'black', 'text-align': 'center'}),
    html.Div([
    html.Img(src=b64_image(path_perf_lanet), width=1000)], style={'text-align': 'center','border': '3px solid #CECCD0', 'padding': '10px'}), 
        
        ])
             

    
    elif model == "model2":
        # Metriques du modele 
        return html.Div([
    html.H3("InceptionV3", style={'color': 'black', 'text-align': 'center'}),
    
    
    html.Div([
    html.P([
    html.Strong("InceptionV3"),
    " est un mod√®le de r√©seau de neurones profond pour la classification d'images mais aussi pour les v√©hicules autonomes et l'imagerie m√©dicale et il a √©t√© d√©velopp√© par des chercheurs de Google et a √©t√© publi√© en 2015 en tant qu'am√©lioration par rapport √† son pr√©d√©cesseur, InceptionV1.",
    html.Br(),
    html.Br(),
    "Le mod√®le InceptionV3 utilise une architecture de r√©seau de neurones convolutif avec plusieurs couches, y compris des couches convolutives, des couches de regroupement et des couches enti√®rement connect√©es. L'une de ses principales caract√©ristiques est l'utilisation de modules de d√©marrage, qui sont con√ßus pour capturer efficacement des caract√©ristiques √† diff√©rentes √©chelles et r√©solutions. Le mod√®le est form√© sur un grand ensemble de donn√©es d'images labellis√©es et apprend √† reconna√Ætre les mod√®les et les caract√©ristiques dans les images. Une fois form√©, le mod√®le peut √™tre utilis√© pour classer de nouvelles images dans diff√©rentes cat√©gories ou d√©tecter des objets dans des images.",
	html.Br(),
	html.Br(),
	html.Strong("InceptionV3 "),
	"a atteint des performances de pointe sur une gamme d'ensembles de donn√©es de classification d'images de r√©f√©rence, tels qu'ImageNet.", 
	html.Br(),
	html.Br(),
	"Dans un premier temps, nous avons charg√© le mod√®le InceptionV3 pre-entrain√© qui a √©t√© form√© sur le jeu de donn√©es ImageNet. Les trois paramentr√®s que nous avons sont :",

    html.Ul([
        html.Li("weights sp√©cifie que les poids pr√©-form√©s doivent √™tre charg√©s."),
        html.Li("include_top = False pour exclure la derni√®re couche enti√®rement connect√©e du mod√®le, ce qui nous permet d'ajouter nos propres couches de classification. "),
        html.Li("input_shape sp√©cifie la taille des images d'entr√©e attendues par le mod√®le."),
    ]),
    html.Br(),
    "Ensuite, nous avons cr√©e un mod√®le sequentiel auquel nous avons ajout√© le mod√®le InceptionV3 en tant que premi√®re couche. Une couche", 
    html.Strong(" GlobalAveragePooling2D "), "est ensuite ajout√©e pour r√©duire les dimensions spatiales de la sortie du mod√®le pr√©-entra√Æn√©.  Puis une couche", 
    html.Strong(" Dense "), "enti√®rement connect√©e avec 250 unit√©s et une fonction d'activation ReLU, une couche", 
    html.Strong(" Dropout "), "pour r√©gulariser le r√©seau mise √† 0.4 (cela signifie que le 40% les connextion entre les couche pr√©c√©dente et la couche suivant ont √©t√© coup√©es), et une couche Dense finale avec 4 unit√©s qui correspondent au nombre des classes d'output avec une fonction d'activation softmax pour renvoyer des pr√©dictions de probabilit√© pour chaque classe.", 
    html.Br(),
    html.Br(),
"Pour la compilation du mod√®le, nous avons utilis√© l'optimiseur", 
html.Strong(" Adam "), "avec un taux d'apprentissage de 0,001 et la fonction de perte d'entropie crois√©e cat√©gorielle est utilis√©e pour former le mod√®le. ", 
    html.Br(),
    html.Br(),
"Concernant l'entrainement du mod√®le, le mod√®le a √©t√© entrain√© sur les donn√©es d'entra√Ænement (train_generator) et valid√© sur les donn√©es de validation (validation_generator) pour un maximum de 25 √©poques. Un rappel", 
html.Strong(" EarlyStopping "),  "est √©galement utilis√© pour arr√™ter l'entra√Ænement plus t√¥t si la perte de validation ne s'am√©liore pas pendant 3 √©poques cons√©cutives. Cela permet d'optimiser le taux d'apprentissage du mod√®le. ", 
])

    
        ], style={'padding': '20px', 'justifyContent': 'space-between', 'border': '3px solid #CECCD0'}),
    

    
    html.H4('M√©triques', style={'color': 'black', 'text-align': 'center'}),
    html.Div([
        html.Div([
            html.H5("Train Loss", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.1120')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}),
        html.Div([
            html.H5("Train Accuracy", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.9600')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}),
        html.Div([
            html.H5("Validation Loss", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.1869')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}), 
        html.Div([
            html.H5("Validation Accuracy", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.9464')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0'})
    ], style={'display': 'flex', 'justify-content': 'center', 'align-items': 'center', 'margin-top': '20px', 'padding-top': '20px', 'margin-bottom': '50px'}),
    #Graphiques cote √† cote
    html.H4('Evolution de la performance du mod√®le', style={'color': 'black', 'text-align': 'center'}),
    html.Div([
    html.Img(src=b64_image(path_perf_incp), width=1000)], style={'text-align': 'center','border': '3px solid #CECCD0', 'padding': '10px'}),
    
])
    

    elif model == "model3":
        # Metriques du modele 
        return html.Div([
    html.H3("EfficientNet", style={'color': 'black', 'text-align': 'center'}),
    
    
    html.Div([
    html.P([
    html.Strong("EfficientNet "),
    "est une architecture de r√©seau de neurones profonds qui a √©t√© d√©velopp√©e en 2019. Ce mod√®le fait partie des mod√®les du", 
    html.Strong(" state-of-the-art "), "des performances sur les diff√©rentes t√¢ches de Computer vVision.",
    html.Br(),
    html.Br(),
    "L'architecture d'EfficientNet est bas√©e sur une m√©thode de mise √† l'√©chelle compos√©e qui permet au mod√®le d'√©quilibrer sa profondeur, sa largeur et sa r√©solution √† chaque couche. Plus pr√©cis√©ment, le mod√®le est compos√© de plusieurs blocs(qui contient une s√©rie de couches convolutives, de normalisation par lots et de fonctions d'activation).",
	html.Br(),
	html.Br(),
	"Le bloc de construction principal de l'architecture EfficientNet est la convolution de goulot d'√©tranglement invers√© mobile (MBConv). Le bloc MBConv se compose de trois composants principaux :",
    html.Ul([
        html.Li("Convolution en profondeur : il s'agit d'une op√©ration de convolution l√©g√®re qui applique un seul filtre √† chaque canal d'entr√©e s√©par√©ment. Elle est suivie d'une normalisation et d'une activation par lots."),
        html.Li("Goulot d'√©tranglement invers√© : il s'agit d'une fonction non lin√©aire qui augmente le nombre de canaux, puis applique une convolution ponctuelle pour r√©duire la dimensionnalit√©."),
        html.Li("Goulot d'√©tranglement lin√©aire : il s'agit d'une combinaison de fonctions de convolution ponctuelle, de normalisation par lots et d'activation qui r√©duisent le nombre de canaux √† la valeur d'origine."),
    ]),
    html.Br(),
    "L'architecture EfficientNet comprend √©galement une technique appel√©e", 
    html.Strong(" activation swish "), "qui est une fonction d'activation non lin√©aire qui est plus efficace en termes de calcul que l'activation ReLU.", 
html.Br(),
html.Br(),
"Enfin, EfficientNet utilise une technique appel√©e", 
html.Strong(" mise √† l'√©chelle compos√©e "),  "qui consiste √† mettre √† l'√©chelle la profondeur, la largeur et la r√©solution du mod√®le de mani√®re √©quilibr√©e. Cela permet au mod√®le d'atteindre une grande pr√©cision sur un large √©ventail de t√¢ches tout en √©tant efficace en termes de calcul.", 
html.Br(),
html.Br(),
"Concernant la construction de l'architecture, nous avons proced√© comme pour le mod√®le InceptionV3.", 
])

    
        ], style={'padding': '20px', 'justifyContent': 'space-between', 'border': '3px solid #CECCD0'}),
        
    html.H4('M√©triques', style={'color': '#1A2F5C', 'text-align': 'center'}),
    html.Div([
        html.Div([
            html.H5("Train Loss", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.1423')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}),
        html.Div([
            html.H5("Train Accuracy", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.9556')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}),
        html.Div([
            html.H5("Validation Loss", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.2002')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0', 'margin-right': '20px'}), 
        html.Div([
            html.H5("Validation Accuracy", style={'color': 'black', 'text-align': 'center'}),
            html.Hr(style={'border-color': '#CECCD0', 'width': '50%'}),
            html.P('0.9464')
        ], style={'padding': '20px', 'text-align': 'center', 'border': '3px solid #CECCD0'})
    ], style={'display': 'flex', 'justify-content': 'center', 'align-items': 'center', 'margin-top': '20px', 'padding-top': '20px', 'margin-bottom': '50px'}),
    # Graphique 
    html.H4('Evolution de la performance du mod√®le', style={'color': 'black', 'text-align': 'center'}),
    html.Div([
    html.Img(src=b64_image(path_perf_efn), width=1000)], style={'text-align': 'center','border': '3px solid #CECCD0', 'padding': '10px'}),
])



def prediction(img):
    img = img.resize((224, 224)) 
    test_array = np.array(img)
    test_array= test_array/255.0
    test_array = np.expand_dims(test_array, axis=0)

    # Pr√©dictions 
    predicted_probabilities = incv3.predict(test_array)
    predicted_labels = np.argmax(predicted_probabilities, axis=1)
    
    labels = ['Nuageux ‚òÅÔ∏è ', 'Pluvieux üåßÔ∏è ', 'Ensoleill√© ‚òÄÔ∏è ', 'Lev√©e du soleil üåÖ '] 
    
    return labels[predicted_labels[0]]


image_data = None

# Definition de la fonction qui parse l'image charg√©e 
def parse_contents(contents, filename, date):
    global image_data
    image_data = contents.encode('utf-8').split(b';base64,')[1]
    image = Image.open(io.BytesIO(base64.b64decode(image_data)))
    
    # R√©cuperer les labels pr√©dits
    predicted_label = prediction(image)
    
    return html.Div([
        html.H6("Le nom de l'image que vous avez choisit de pr√©dire est : " +filename),
        html.Img(src=contents),
        html.Hr(),
        html.H4(f"Classe pr√©dite : {predicted_label}")
    ])

# D√©finition du callback qui permet de mettre √† jour l'output 
@app.callback(Output('output-image-upload', 'children'),
              Input('upload-image', 'contents'),
              State('upload-image', 'filename'),
              State('upload-image', 'last_modified'))
def update_output(list_of_contents, list_of_names, list_of_dates):
    if list_of_contents is not None:
        children = [
            parse_contents(c, n, d) for c, n, d in
            zip(list_of_contents, list_of_names, list_of_dates)]
        return children
    

# Fin de l'application
if __name__ == "__main__":
    app.run_server(debug=True)

